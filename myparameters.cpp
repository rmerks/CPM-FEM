/*
 *
 *  This file is part of the Virtual Leaf.
 *
 *  VirtualLeaf is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  VirtualLeaf is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the Virtual Leaf.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Copyright 2010 Roeland Merks.
 *
 */

// WARNING: This file is automatically generated by make_parameter_source.pl.
// Do not edit. All edits will be discarded.

#include "myparameters.h"
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cerrno>
#include <iostream>
#include <sstream>
#include "output.h"
#include "parse.h"
//#include "xmlwrite.h"
#include "warning.h"
#include <QLocale>
#include <QDir>
#include <QStringList>
#include <sys/stat.h>
#include <sys/types.h>

using namespace std;

static const std::string _module_id("$Id$");

Parameter::Parameter() {
  SEED = 1;
  NVX = 40;
  NVY = 40;
  MCS = NVX*NVY;
  TARGETVOLUME = 50;
  CELLFORCE = 1;
  VOXSIZE = 0.0000025;
  NRINC = 101;
  MAXNRITER = 1000;
  ACCURACY = 0.00001;
  YOUNGS = 32000;
  POISSON = 0.45;
  GLOBALSTRAIN = false;
  LOADANGLE = 180;
  LOAD = 0;
  MOTILITY = 1;
  INELASTICITY = 500.0;
  NOSTICKJCM = 500000.0;
  NOSTICKJCC = 500000.0;
  LAMBDADUR = 10;
  THRESHOLDSTIFF = 15E3;
  STIFFSENSITIVITY = 0.0005;
  STIFFENINGSTIFF = 0.1;
  COMPRESSINGSTIFF = false;
  LAMBDADISS = 0;
  COLLAGEN = 100;
  PIXPERVOX = 5;
  LINEWIDTH = 1;
  CELLFORCES = true;
  DUROTAXIS = true;
  STRIDE = 10;
  WSTRIDE = 100;
  STRAINFIELD = true;
  FORCEFIELD = false;
  PRINCFIELD = true;
  WHICHSIGMF = 1;
  NODECONNECTION = false;
  CELLCOLOUR = true;
  ONECELL = true;
  TWOCELL = false;
  DISTWOCELLS = 7;
  CELLCOL = false;
  READCELLS = false;
  CELLDENSITY = 0.25;
  BOUNDARYDIS = 0;
  NRcf = 0;
  COLORBAR = false;
  MAXCOLORBAR = 0;
  WIDTHCOLORBAR = 0;
  WRATIOPA = false;
  WLENGTH = false;
  WAREA = false;
  WSQDIS = false;
  WECC = false;
  WANGLE = false;
  WSIGMA = false;
  WTWOCELLCONTACT = false;
  WTWOCELLANGLECM = false;
}

Parameter::~Parameter() {
    
// destruct parameter object
// free string parameter
CleanUp();
}

void Parameter::CleanUp(void) {

}

void Parameter::Read(const char *filename) {
    
  static bool ReadP=false;

  if (ReadP) {

    //throw "Run Time Error in myparameters.cpp: Please Read parameter file only once!!";
    CleanUp();
	
  } else
    ReadP=true;

  FILE *fp=OpenReadFile(filename);


  SEED = igetpar(fp, "SEED", 1, true);
  NVX = igetpar(fp, "NVX", 40, true);
  NVY = igetpar(fp, "NVY", 40, true);
  MCS = igetpar(fp, "MCS", NVX*NVY, true);
  TARGETVOLUME = igetpar(fp, "TARGETVOLUME", 50, true);
  CELLFORCE = fgetpar(fp, "CELLFORCE", 1, true);
  VOXSIZE = fgetpar(fp, "VOXSIZE", 0.0000025, true);
  NRINC = igetpar(fp, "NRINC", 101, true);
  MAXNRITER = igetpar(fp, "MAXNRITER", 1000, true);
  ACCURACY = fgetpar(fp, "ACCURACY", 0.00001, true);
  YOUNGS = fgetpar(fp, "YOUNGS", 32000, true);
  POISSON = fgetpar(fp, "POISSON", 0.45, true);
  GLOBALSTRAIN = bgetpar(fp, "GLOBALSTRAIN", false, true);
  LOADANGLE = fgetpar(fp, "LOADANGLE", 180, true);
  LOAD = fgetpar(fp, "LOAD", 0, true);
  MOTILITY = fgetpar(fp, "MOTILITY", 1, true);
  INELASTICITY = fgetpar(fp, "INELASTICITY", 500.0, true);
  NOSTICKJCM = fgetpar(fp, "NOSTICKJCM", 500000.0, true);
  NOSTICKJCC = fgetpar(fp, "NOSTICKJCC", 500000.0, true);
  LAMBDADUR = fgetpar(fp, "LAMBDADUR", 10, true);
  THRESHOLDSTIFF = fgetpar(fp, "THRESHOLDSTIFF", 15E3, true);
  STIFFSENSITIVITY = fgetpar(fp, "STIFFSENSITIVITY", 0.0005, true);
  STIFFENINGSTIFF = fgetpar(fp, "STIFFENINGSTIFF", 0.1, true);
  COMPRESSINGSTIFF = bgetpar(fp, "COMPRESSINGSTIFF", false, true);
  LAMBDADISS = fgetpar(fp, "LAMBDADISS", 0, true);
  COLLAGEN = fgetpar(fp, "COLLAGEN", 100, true);
  PIXPERVOX = igetpar(fp, "PIXPERVOX", 5, true);
  LINEWIDTH = igetpar(fp, "LINEWIDTH", 1, true);
  CELLFORCES = bgetpar(fp, "CELLFORCES", true, true);
  DUROTAXIS = bgetpar(fp, "DUROTAXIS", true, true);
  STRIDE = igetpar(fp, "STRIDE", 10, true);
  WSTRIDE = igetpar(fp, "WSTRIDE", 100, true);
  STRAINFIELD = bgetpar(fp, "STRAINFIELD", true, true);
  FORCEFIELD = bgetpar(fp, "FORCEFIELD", false, true);
  PRINCFIELD = bgetpar(fp, "PRINCFIELD", true, true);
  WHICHSIGMF = igetpar(fp, "WHICHSIGMF", 1, true);
  NODECONNECTION = bgetpar(fp, "NODECONNECTION", false, true);
  CELLCOLOUR = bgetpar(fp, "CELLCOLOUR", true, true);
  ONECELL = bgetpar(fp, "ONECELL", true, true);
  TWOCELL = bgetpar(fp, "TWOCELL", false, true);
  DISTWOCELLS = igetpar(fp, "DISTWOCELLS", 7, true);
  CELLCOL = bgetpar(fp, "CELLCOL", false, true);
  READCELLS = bgetpar(fp, "READCELLS", false, true);
  CELLDENSITY = fgetpar(fp, "CELLDENSITY", 0.25, true);
  BOUNDARYDIS = igetpar(fp, "BOUNDARYDIS", 0, true);
  NRcf = igetpar(fp, "NRcf", 0, true);
  COLORBAR = bgetpar(fp, "COLORBAR", false, true);
  MAXCOLORBAR = fgetpar(fp, "MAXCOLORBAR", 0, true);
  WIDTHCOLORBAR = igetpar(fp, "WIDTHCOLORBAR", 0, true);
  WRATIOPA = bgetpar(fp, "WRATIOPA", false, true);
  WLENGTH = bgetpar(fp, "WLENGTH", false, true);
  WAREA = bgetpar(fp, "WAREA", false, true);
  WSQDIS = bgetpar(fp, "WSQDIS", false, true);
  WECC = bgetpar(fp, "WECC", false, true);
  WANGLE = bgetpar(fp, "WANGLE", false, true);
  WSIGMA = bgetpar(fp, "WSIGMA", false, true);
  WTWOCELLCONTACT = bgetpar(fp, "WTWOCELLCONTACT", false, true);
  WTWOCELLANGLECM = bgetpar(fp, "WTWOCELLANGLECM", false, true);
}

const char *sbool(const bool &p) {

  const char *true_str="true";
  const char *false_str="false";
  if (p)
    return true_str;
  else
    return false_str;
}

void Parameter::Write(ostream &os) const {

  os << " SEED = " << SEED << endl;
  os << " NVX = " << NVX << endl;
  os << " NVY = " << NVY << endl;
  os << " MCS = " << MCS << endl;
  os << " TARGETVOLUME = " << TARGETVOLUME << endl;
  os << " CELLFORCE = " << CELLFORCE << endl;
  os << " VOXSIZE = " << VOXSIZE << endl;
  os << " NRINC = " << NRINC << endl;
  os << " MAXNRITER = " << MAXNRITER << endl;
  os << " ACCURACY = " << ACCURACY << endl;
  os << " YOUNGS = " << YOUNGS << endl;
  os << " POISSON = " << POISSON << endl;
  os << " GLOBALSTRAIN = " << sbool(GLOBALSTRAIN) << endl;
  os << " LOADANGLE = " << LOADANGLE << endl;
  os << " LOAD = " << LOAD << endl;
  os << " MOTILITY = " << MOTILITY << endl;
  os << " INELASTICITY = " << INELASTICITY << endl;
  os << " NOSTICKJCM = " << NOSTICKJCM << endl;
  os << " NOSTICKJCC = " << NOSTICKJCC << endl;
  os << " LAMBDADUR = " << LAMBDADUR << endl;
  os << " THRESHOLDSTIFF = " << THRESHOLDSTIFF << endl;
  os << " STIFFSENSITIVITY = " << STIFFSENSITIVITY << endl;
  os << " STIFFENINGSTIFF = " << STIFFENINGSTIFF << endl;
  os << " COMPRESSINGSTIFF = " << sbool(COMPRESSINGSTIFF) << endl;
  os << " LAMBDADISS = " << LAMBDADISS << endl;
  os << " COLLAGEN = " << COLLAGEN << endl;
  os << " PIXPERVOX = " << PIXPERVOX << endl;
  os << " LINEWIDTH = " << LINEWIDTH << endl;
  os << " CELLFORCES = " << sbool(CELLFORCES) << endl;
  os << " DUROTAXIS = " << sbool(DUROTAXIS) << endl;
  os << " STRIDE = " << STRIDE << endl;
  os << " WSTRIDE = " << WSTRIDE << endl;
  os << " STRAINFIELD = " << sbool(STRAINFIELD) << endl;
  os << " FORCEFIELD = " << sbool(FORCEFIELD) << endl;
  os << " PRINCFIELD = " << sbool(PRINCFIELD) << endl;
  os << " WHICHSIGMF = " << WHICHSIGMF << endl;
  os << " NODECONNECTION = " << sbool(NODECONNECTION) << endl;
  os << " CELLCOLOUR = " << sbool(CELLCOLOUR) << endl;
  os << " ONECELL = " << sbool(ONECELL) << endl;
  os << " TWOCELL = " << sbool(TWOCELL) << endl;
  os << " DISTWOCELLS = " << DISTWOCELLS << endl;
  os << " CELLCOL = " << sbool(CELLCOL) << endl;
  os << " READCELLS = " << sbool(READCELLS) << endl;
  os << " CELLDENSITY = " << CELLDENSITY << endl;
  os << " BOUNDARYDIS = " << BOUNDARYDIS << endl;
  os << " NRcf = " << NRcf << endl;
  os << " COLORBAR = " << sbool(COLORBAR) << endl;
  os << " MAXCOLORBAR = " << MAXCOLORBAR << endl;
  os << " WIDTHCOLORBAR = " << WIDTHCOLORBAR << endl;
  os << " WRATIOPA = " << sbool(WRATIOPA) << endl;
  os << " WLENGTH = " << sbool(WLENGTH) << endl;
  os << " WAREA = " << sbool(WAREA) << endl;
  os << " WSQDIS = " << sbool(WSQDIS) << endl;
  os << " WECC = " << sbool(WECC) << endl;
  os << " WANGLE = " << sbool(WANGLE) << endl;
  os << " WSIGMA = " << sbool(WSIGMA) << endl;
  os << " WTWOCELLCONTACT = " << sbool(WTWOCELLCONTACT) << endl;
  os << " WTWOCELLANGLECM = " << sbool(WTWOCELLANGLECM) << endl;
}
/*
void Parameter::XMLAdd(xmlNode *root) const {
    xmlNode *xmlparameter = xmlNewChild(root, NULL, BAD_CAST "parameter", NULL);
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "SEED" );
  ostringstream text;
    text << SEED;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NVX" );
  ostringstream text;
    text << NVX;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NVY" );
  ostringstream text;
    text << NVY;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MCS" );
  ostringstream text;
    text << MCS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "TARGETVOLUME" );
  ostringstream text;
    text << TARGETVOLUME;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CELLFORCE" );
  ostringstream text;
    text << CELLFORCE;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "VOXSIZE" );
  ostringstream text;
    text << VOXSIZE;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NRINC" );
  ostringstream text;
    text << NRINC;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MAXNRITER" );
  ostringstream text;
    text << MAXNRITER;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "ACCURACY" );
  ostringstream text;
    text << ACCURACY;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "YOUNGS" );
  ostringstream text;
    text << YOUNGS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "POISSON" );
  ostringstream text;
    text << POISSON;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "GLOBALSTRAIN" );
  ostringstream text;
text << sbool(GLOBALSTRAIN);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LOADANGLE" );
  ostringstream text;
    text << LOADANGLE;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LOAD" );
  ostringstream text;
    text << LOAD;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MOTILITY" );
  ostringstream text;
    text << MOTILITY;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "INELASTICITY" );
  ostringstream text;
    text << INELASTICITY;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NOSTICKJCM" );
  ostringstream text;
    text << NOSTICKJCM;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NOSTICKJCC" );
  ostringstream text;
    text << NOSTICKJCC;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LAMBDADUR" );
  ostringstream text;
    text << LAMBDADUR;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "THRESHOLDSTIFF" );
  ostringstream text;
    text << THRESHOLDSTIFF;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "STIFFSENSITIVITY" );
  ostringstream text;
    text << STIFFSENSITIVITY;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "STIFFENINGSTIFF" );
  ostringstream text;
    text << STIFFENINGSTIFF;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "COMPRESSINGSTIFF" );
  ostringstream text;
text << sbool(COMPRESSINGSTIFF);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LAMBDADISS" );
  ostringstream text;
    text << LAMBDADISS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "COLLAGEN" );
  ostringstream text;
    text << COLLAGEN;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "PIXPERVOX" );
  ostringstream text;
    text << PIXPERVOX;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LINEWIDTH" );
  ostringstream text;
    text << LINEWIDTH;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CELLFORCES" );
  ostringstream text;
text << sbool(CELLFORCES);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "DUROTAXIS" );
  ostringstream text;
text << sbool(DUROTAXIS);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "STRIDE" );
  ostringstream text;
    text << STRIDE;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WSTRIDE" );
  ostringstream text;
    text << WSTRIDE;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "STRAINFIELD" );
  ostringstream text;
text << sbool(STRAINFIELD);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "FORCEFIELD" );
  ostringstream text;
text << sbool(FORCEFIELD);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "PRINCFIELD" );
  ostringstream text;
text << sbool(PRINCFIELD);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WHICHSIGMF" );
  ostringstream text;
    text << WHICHSIGMF;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NODECONNECTION" );
  ostringstream text;
text << sbool(NODECONNECTION);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CELLCOLOUR" );
  ostringstream text;
text << sbool(CELLCOLOUR);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "ONECELL" );
  ostringstream text;
text << sbool(ONECELL);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "TWOCELL" );
  ostringstream text;
text << sbool(TWOCELL);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "DISTWOCELLS" );
  ostringstream text;
    text << DISTWOCELLS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CELLCOL" );
  ostringstream text;
text << sbool(CELLCOL);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "READCELLS" );
  ostringstream text;
text << sbool(READCELLS);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CELLDENSITY" );
  ostringstream text;
    text << CELLDENSITY;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "BOUNDARYDIS" );
  ostringstream text;
    text << BOUNDARYDIS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NRcf" );
  ostringstream text;
    text << NRcf;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "COLORBAR" );
  ostringstream text;
text << sbool(COLORBAR);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MAXCOLORBAR" );
  ostringstream text;
    text << MAXCOLORBAR;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WIDTHCOLORBAR" );
  ostringstream text;
    text << WIDTHCOLORBAR;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WRATIOPA" );
  ostringstream text;
text << sbool(WRATIOPA);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WLENGTH" );
  ostringstream text;
text << sbool(WLENGTH);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WAREA" );
  ostringstream text;
text << sbool(WAREA);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WSQDIS" );
  ostringstream text;
text << sbool(WSQDIS);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WECC" );
  ostringstream text;
text << sbool(WECC);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WANGLE" );
  ostringstream text;
text << sbool(WANGLE);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WSIGMA" );
  ostringstream text;
text << sbool(WSIGMA);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WTWOCELLCONTACT" );
  ostringstream text;
text << sbool(WTWOCELLCONTACT);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WTWOCELLANGLECM" );
  ostringstream text;
text << sbool(WTWOCELLANGLECM);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
}
void Parameter::AssignValToPar(const char *namec, const char *valc) {
  QLocale standardlocale(QLocale::C);
  bool ok;
if (!strcmp(namec, "SEED")) {
  SEED = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'SEED' from XML file.",valc); }
}
if (!strcmp(namec, "NVX")) {
  NVX = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'NVX' from XML file.",valc); }
}
if (!strcmp(namec, "NVY")) {
  NVY = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'NVY' from XML file.",valc); }
}
if (!strcmp(namec, "MCS")) {
  MCS = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'MCS' from XML file.",valc); }
}
if (!strcmp(namec, "TARGETVOLUME")) {
  TARGETVOLUME = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'TARGETVOLUME' from XML file.",valc); }
}
if (!strcmp(namec, "CELLFORCE")) {
  CELLFORCE = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'CELLFORCE' from XML file.",valc); }
}
if (!strcmp(namec, "VOXSIZE")) {
  VOXSIZE = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'VOXSIZE' from XML file.",valc); }
}
if (!strcmp(namec, "NRINC")) {
  NRINC = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'NRINC' from XML file.",valc); }
}
if (!strcmp(namec, "MAXNRITER")) {
  MAXNRITER = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'MAXNRITER' from XML file.",valc); }
}
if (!strcmp(namec, "ACCURACY")) {
  ACCURACY = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'ACCURACY' from XML file.",valc); }
}
if (!strcmp(namec, "YOUNGS")) {
  YOUNGS = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'YOUNGS' from XML file.",valc); }
}
if (!strcmp(namec, "POISSON")) {
  POISSON = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'POISSON' from XML file.",valc); }
}
if (!strcmp(namec, "GLOBALSTRAIN")) {
GLOBALSTRAIN = strtobool(valc);
}
if (!strcmp(namec, "LOADANGLE")) {
  LOADANGLE = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'LOADANGLE' from XML file.",valc); }
}
if (!strcmp(namec, "LOAD")) {
  LOAD = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'LOAD' from XML file.",valc); }
}
if (!strcmp(namec, "MOTILITY")) {
  MOTILITY = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'MOTILITY' from XML file.",valc); }
}
if (!strcmp(namec, "INELASTICITY")) {
  INELASTICITY = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'INELASTICITY' from XML file.",valc); }
}
if (!strcmp(namec, "NOSTICKJCM")) {
  NOSTICKJCM = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'NOSTICKJCM' from XML file.",valc); }
}
if (!strcmp(namec, "NOSTICKJCC")) {
  NOSTICKJCC = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'NOSTICKJCC' from XML file.",valc); }
}
if (!strcmp(namec, "LAMBDADUR")) {
  LAMBDADUR = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'LAMBDADUR' from XML file.",valc); }
}
if (!strcmp(namec, "THRESHOLDSTIFF")) {
  THRESHOLDSTIFF = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'THRESHOLDSTIFF' from XML file.",valc); }
}
if (!strcmp(namec, "STIFFSENSITIVITY")) {
  STIFFSENSITIVITY = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'STIFFSENSITIVITY' from XML file.",valc); }
}
if (!strcmp(namec, "STIFFENINGSTIFF")) {
  STIFFENINGSTIFF = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'STIFFENINGSTIFF' from XML file.",valc); }
}
if (!strcmp(namec, "COMPRESSINGSTIFF")) {
COMPRESSINGSTIFF = strtobool(valc);
}
if (!strcmp(namec, "LAMBDADISS")) {
  LAMBDADISS = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'LAMBDADISS' from XML file.",valc); }
}
if (!strcmp(namec, "COLLAGEN")) {
  COLLAGEN = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'COLLAGEN' from XML file.",valc); }
}
if (!strcmp(namec, "PIXPERVOX")) {
  PIXPERVOX = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'PIXPERVOX' from XML file.",valc); }
}
if (!strcmp(namec, "LINEWIDTH")) {
  LINEWIDTH = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'LINEWIDTH' from XML file.",valc); }
}
if (!strcmp(namec, "CELLFORCES")) {
CELLFORCES = strtobool(valc);
}
if (!strcmp(namec, "DUROTAXIS")) {
DUROTAXIS = strtobool(valc);
}
if (!strcmp(namec, "STRIDE")) {
  STRIDE = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'STRIDE' from XML file.",valc); }
}
if (!strcmp(namec, "WSTRIDE")) {
  WSTRIDE = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'WSTRIDE' from XML file.",valc); }
}
if (!strcmp(namec, "STRAINFIELD")) {
STRAINFIELD = strtobool(valc);
}
if (!strcmp(namec, "FORCEFIELD")) {
FORCEFIELD = strtobool(valc);
}
if (!strcmp(namec, "PRINCFIELD")) {
PRINCFIELD = strtobool(valc);
}
if (!strcmp(namec, "WHICHSIGMF")) {
  WHICHSIGMF = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'WHICHSIGMF' from XML file.",valc); }
}
if (!strcmp(namec, "NODECONNECTION")) {
NODECONNECTION = strtobool(valc);
}
if (!strcmp(namec, "CELLCOLOUR")) {
CELLCOLOUR = strtobool(valc);
}
if (!strcmp(namec, "ONECELL")) {
ONECELL = strtobool(valc);
}
if (!strcmp(namec, "TWOCELL")) {
TWOCELL = strtobool(valc);
}
if (!strcmp(namec, "DISTWOCELLS")) {
  DISTWOCELLS = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'DISTWOCELLS' from XML file.",valc); }
}
if (!strcmp(namec, "CELLCOL")) {
CELLCOL = strtobool(valc);
}
if (!strcmp(namec, "READCELLS")) {
READCELLS = strtobool(valc);
}
if (!strcmp(namec, "CELLDENSITY")) {
  CELLDENSITY = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'CELLDENSITY' from XML file.",valc); }
}
if (!strcmp(namec, "BOUNDARYDIS")) {
  BOUNDARYDIS = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'BOUNDARYDIS' from XML file.",valc); }
}
if (!strcmp(namec, "NRcf")) {
  NRcf = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'NRcf' from XML file.",valc); }
}
if (!strcmp(namec, "COLORBAR")) {
COLORBAR = strtobool(valc);
}
if (!strcmp(namec, "MAXCOLORBAR")) {
  MAXCOLORBAR = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'MAXCOLORBAR' from XML file.",valc); }
}
if (!strcmp(namec, "WIDTHCOLORBAR")) {
  WIDTHCOLORBAR = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'WIDTHCOLORBAR' from XML file.",valc); }
}
if (!strcmp(namec, "WRATIOPA")) {
WRATIOPA = strtobool(valc);
}
if (!strcmp(namec, "WLENGTH")) {
WLENGTH = strtobool(valc);
}
if (!strcmp(namec, "WAREA")) {
WAREA = strtobool(valc);
}
if (!strcmp(namec, "WSQDIS")) {
WSQDIS = strtobool(valc);
}
if (!strcmp(namec, "WECC")) {
WECC = strtobool(valc);
}
if (!strcmp(namec, "WANGLE")) {
WANGLE = strtobool(valc);
}
if (!strcmp(namec, "WSIGMA")) {
WSIGMA = strtobool(valc);
}
if (!strcmp(namec, "WTWOCELLCONTACT")) {
WTWOCELLCONTACT = strtobool(valc);
}
if (!strcmp(namec, "WTWOCELLANGLECM")) {
WTWOCELLANGLECM = strtobool(valc);
}
}
*/void Parameter::AssignValArrayToPar(const char *namec, vector<double> valarray) {
}

ostream &operator<<(ostream &os, Parameter &p) {
    p.Write(os);
    return os;
}

